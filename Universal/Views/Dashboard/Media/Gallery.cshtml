@model Universal.DTO.ViewDTO.MultiMediaIDTO

@{
	ViewData["Title"] = "Gallery";
}


@{
	await Html.RenderPartialAsync("/Views/Partials/_GalleryGrid.cshtml", Model);
}

<style>
	.fa-eye:hover{
		cursor: pointer;
	}
</style>

<!-- view_picture_modal -->
<div id="view-image-modal" class="modal fade" tabindex="-1" role="dialog">
	<div class="modal-dialog modal-dialog-centered" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h6 class="modal-title text-center" id="view-modal-heading"></h6>
			</div>
			<div class="modal-body">
				<img id="viewImage" name="viewImage" alt="image.png" width="100%" />
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-primary" data-bs-dismiss="modal">Close</button>
			</div>
		</div>
	</div>
</div>
<!-- view_picture_modal -->

<div id="edit-image-modal" class="modal fade" tabindex="-1" role="dialog">
	@using (Html.BeginForm("EditMeidaImage", "Dashboard", FormMethod.Post))
	{
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Edit Image Properties</h5>
					<button type="button" class="close closeEditModalButton" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					@Html.HiddenFor(model => model.MediaIDTO.MediaId, new { @id="input-edit-mediaId" })
					@Html.TextBoxFor(model => model.MediaIDTO.MetaTitle, new { @id="input-edit-title", @class = "form-control mb-3", placeholder = "Meta Title" })
					@Html.TextBoxFor(model => model.MediaIDTO.MetaDescription, new { @id="input-edit-desc", @class = "form-control mb-3", placeholder = "Meta Description" })
					@Html.TextBoxFor(model => model.MediaIDTO.AltTitle, new { @id="input-edit-alt", @class = "form-control mb-3", placeholder = "Alt Title" })
				</div>
				<div class="modal-footer">
					<input type="submit" class="btn btn-dotnet" value="Save" />
					<button type="button" class="btn btn-secondary closeEditModalButton" data-dismiss="modal">Close</button>
				</div>
			</div>
		</div>
	}
</div>

<div id="delete-image-modal" class="modal fade" tabindex="-1" role="dialog">
	@using (Html.BeginForm("DeleteMeidaImage", "Dashboard", FormMethod.Post))
	{
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Delete Image?</h5>
					<button type="button" class="close closeDeleteModalButton" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					<p id="delete-message"></p>
					@Html.HiddenFor(model => model.MediaIDTO.MediaId, new { @id="input-delete-mediaId" })
					@Html.HiddenFor(model => model.MediaIDTO.MediaTypeId, new { @id="input-delete-mediaTypeId" })
					@Html.HiddenFor(model => model.MediaIDTO.MetaTitle, new { @id="input-delete-mediaMeta" })
				</div>
				<div class="modal-footer">
					<input type="submit" class="btn btn-dotnet" value="Delete" />
					<button type="button" class="btn btn-secondary closeDeleteModalButton" data-dismiss="modal">Close</button>
				</div>
			</div>
		</div>
	}
</div>

@section Scripts{
	<script>
		toggleLoading();

		let data = @Json.Serialize(Model.MediaList);
		console.log(data);
		$(document).ready(function () {

			let view_buttons = document.getElementsByClassName("fa-eye");
			let view_modal_image = document.getElementById("viewImage");
			let view_modal_heading = document.getElementById("view-modal-heading");
			for (let i = 0; i < view_buttons.length; i++) {
				view_buttons[i].addEventListener("click", function () {
					let modalHeading = this.dataset.mediaTitle;
					let imageSrc = this.dataset.mediaSrc;
					view_modal_image.src = "/Dashboard/GetImage?path=" + imageSrc;
					if (modalHeading.length == 0) {
						let parts = imageSrc.split('/');
						view_modal_heading.textContent = parts[1];
					} else {
						view_modal_heading.textContent = modalHeading;
					}
					$("#view-image-modal").modal("toggle");
				});
			}


			let edit_buttons = document.getElementsByClassName("fa-edit");
			for (let i = 0; i < edit_buttons.length; i++) {
				edit_buttons[i].addEventListener("click", function () {
					let mediaId = this.dataset.mediaId;
					const media = data.find(obj => obj.mediaId == mediaId);
					
					$("#input-edit-mediaId").val(mediaId);
					$("#input-edit-title").val(media.metaTitle);
					$("#input-edit-desc").val(media.metaDescription);
					$("#input-edit-alt").val(media.AltTitle);
					$("#edit-image-modal").modal("toggle");
				});
			}

			let delete_buttons = document.getElementsByClassName("fa-trash");
			for (let i = 0; i < delete_buttons.length; i++) {
				delete_buttons[i].addEventListener("click", function () {
					let mediaId = this.dataset.mediaId;
					let mediaTypeId = this.dataset.mediaMediatype;
					let mediaTitle = this.dataset.mediaTitle;


					$.ajax({
						url: 'https://localhost:7213/api/Media/CheckMediaId?MediaId=' + mediaId,
						type: 'GET',
						data: mediaId,
						success: function (response) {
							$("#delete-message").html(`Do you want to delete "${mediaTitle}" image?<br><br> <span class="text-danger">${response}</span>`)
						},
						error: function () {

						}
					});


					$("#input-delete-mediaId").val(mediaId);
					$("#input-delete-mediaMeta").val(mediaTitle);
					$("#input-delete-mediaTypeId").val(mediaTypeId);
					$("#delete-image-modal").modal("toggle");
				});
			}

			$(".closeEditModalButton").click(function () {
				$('#edit-image-modal').modal('hide');
			});

			$(".closeDeleteModalButton").click(function () {
				$('#delete-image-modal').modal('hide');
			});

			setTimeout(() => { toggleLoading() }, 700)
		});
	</script>
}