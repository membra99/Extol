@model Universal.DTO.ViewDTO.DataIDTO

@{
    ViewData["Title"] = "Edit Data";
}

<div class="col-10 bg-light mx-auto rounded-3">
    <div class="form-group">
        @using (Html.BeginForm("EditDataAction", "Dashboard", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.HiddenFor(model => model.ProductIDTO.ProductId)
            <div class="d-flex flex-row justify-content-around">
                <div class="col-5">
                    <div class="mb-3">
                        <h2>Product</h2>
                    </div>
                    <div class="mb-3">
                        @Html.DropDownListFor(model => model.ProductIDTO.CategoriesId, Model.CategoriesODTOs.Select(cat =>
                    new SelectListItem() { Value = cat.CategoryId.ToString(), Text = cat.CategoryName }),
                    "Select Category", new { @class="form-control"})
                        @Html.ValidationMessageFor(model => model.ProductIDTO.CategoriesId, null, new { @class="text-danger" })
                    </div>
                        <div class="mb-3">

                    @Html.DropDownListFor(model => model.ProductIDTO.IsActive, new List<SelectListItem>
			        {
			        	new SelectListItem() { Text = "Active", Value = "true"},
			        	new SelectListItem() { Text = "Not Active", Value = "false"}
			        	},
			            "Select Product Status", new { @class="form-control" })
                    @Html.ValidationMessageFor(model => model.ProductIDTO.IsActive, null, new { @class="text-danger" })
                    </div>

                    <div class="mb-3">
                        @Html.TextBoxFor(model => model.ProductIDTO.ProductCode, null, new { @class="form-control", placeholder = "Product Code" })
                        @Html.ValidationMessageFor(model => model.ProductIDTO.ProductCode, null, new { @class="text-danger" })
                    </div>
                    <div class="mb-3">
                        @Html.HiddenFor(model => model.ProductIDTO.SeoId)
                        @Html.ValidationMessageFor(model => model.ProductIDTO.SeoId, null, new { @class="text-danger" })
                    </div>
                    <div class="mb-3">
                        @Html.TextBoxFor(model => model.ProductIDTO.ProductName, null, new { @class="form-control", placeholder = "Product Name" })
                        @Html.ValidationMessageFor(model => model.ProductIDTO.ProductName, null, new { @class="text-danger" })
                    </div>
                    <div class="mb-3">
                        @Html.TextAreaFor(model => model.ProductIDTO.Description, 10, 1, new { @Id="tiny", @class="form-control", placeholder = "Description" })
                        @Html.ValidationMessageFor(model => model.ProductIDTO.Description, null, new { @class="text-danger" })
                    </div>
                    <div class="mb-3">
                        @Html.TextAreaFor(model => model.ProductIDTO.Specification, 10, 1, new { @Id="tiny", @class="form-control", placeholder = "Specification" })
                        @Html.ValidationMessageFor(model => model.ProductIDTO.Specification, null, new { @class="text-danger" })
                    </div>
                    <div class="mb-3">
                        @Html.TextBoxFor(model => model.ProductIDTO.Quantity, null, new { type="number", @class="form-control", placeholder="Quantity" })
                        @Html.ValidationMessageFor(model => model.ProductIDTO.Quantity, null, new { @class="text-danger" })
                    </div>
                    <div class="mb-3">
                        @Html.TextBoxFor(model => model.ProductIDTO.Price, null, new { type="number", @class="form-control", placeholder="Price" })
                        @Html.ValidationMessageFor(model => model.ProductIDTO.Price, null, new { @class="text-danger" })
                    </div>
                    <div class="mb-3">
                        @Html.LabelFor(model => model.ProductIDTO.IsOnSale, "On Sale:")
                        @Html.CheckBoxFor(model => model.ProductIDTO.IsOnSale, new { @class="" })
                        @Html.ValidationMessageFor(model => model.ProductIDTO.IsOnSale, null, new { @id="onSaleCheck", @class="text-danger" })
                    </div>
                    <div class="mb-3">
                        @Html.LabelFor(model => model.ProductIDTO.Recommended, "Recommended:")
                        @Html.CheckBoxFor(model => model.ProductIDTO.Recommended, new { @class="" })
                        @Html.ValidationMessageFor(model => model.ProductIDTO.Recommended, null, new { @class="text-danger" })
                    </div>
                    <div class="mb-3">
                        @Html.LabelFor(model => model.ProductIDTO.BestProduct, "Best Product:")
                        @Html.CheckBoxFor(model => model.ProductIDTO.BestProduct, new { @class="" })
                        @Html.ValidationMessageFor(model => model.ProductIDTO.BestProduct, null, new { @class="text-danger" })
                    </div>

                    <div class="mb-3">
                        <h2>Sale</h2>
                    </div>
                    <div class="mb-3">
                        @Html.DropDownListFor(model => model.ProductIDTO.SaleIDTO.SaleTypeId, Model.SaleTypeODTOs.Select(sale =>
                    new SelectListItem() { Value = sale.SaleTypeId.ToString(), Text = sale.Value }),
                    "Select Sale Type", new { @class="form-control", disabled="disabled" })
                        @Html.ValidationMessageFor(model => model.ProductIDTO.SaleIDTO.SaleTypeId, null, new { @class="text-danger" })
                    </div>
                    <div class="mb-3">
                        @Html.TextBoxFor(model => model.ProductIDTO.SaleIDTO.Value, null, new { type = "number", @class = "form-control", placeholder = "Sale Value", disabled="disabled" })
                        @Html.ValidationMessageFor(model => model.ProductIDTO.SaleIDTO.Value, null, new { @class="text-danger" })
                    </div>
                    <div class="mb-3">
                        @Html.TextBoxFor(model => model.ProductIDTO.SaleIDTO.StartDate, null, new { type="date", @class="form-control", disabled="disabled" })
                        @Html.ValidationMessageFor(model => model.ProductIDTO.SaleIDTO.StartDate, null, new { @class="text-danger" })
                    </div>
                    <div class="mb-3">
                        @Html.TextBoxFor(model => model.ProductIDTO.SaleIDTO.EndDate, null, new { type="date", @class="form-control", disabled="disabled" })
                        @Html.ValidationMessageFor(model => model.ProductIDTO.SaleIDTO.EndDate, null, new { @class="text-danger" })
                    </div>
                </div>
                <div id ="section2" class="col-5">
                    <div class="mb-3">
                        <h2>SEO</h2>
                    </div>
                    <div class="mb-3">
                        @Html.TextBoxFor(model => model.ProductIDTO.SeoIDTO.GoogleDesc, null, new { @class="form-control", placeholder = "Google Description" })
                        @Html.ValidationMessageFor(model => model.ProductIDTO.SeoIDTO.GoogleDesc, null, new { @class="text-danger" })
                    </div>
                    <div class="mb-3">
                        @Html.TextBoxFor(model => model.ProductIDTO.SeoIDTO.GoogleKeywords, null, new { @class="form-control", placeholder = "Google Keywords" })
                        @Html.ValidationMessageFor(model => model.ProductIDTO.SeoIDTO.GoogleKeywords, null, new { @class="text-danger" })
                    </div>

                    <div class="mb-3">
                        <h2>Feature Image</h2>
                    </div>
                    <div class="mb-3">
                        @Html.TextBoxFor(model => model.FeaturedImage, null, new { type="file", @class="form-control", runat="server" })
                        @Html.ValidationMessageFor(model => model.FeaturedImage, null, new { @class="text-danger" })
                    </div>
                    <div class="mb-3">
                        <h2>Gallery Images</h2>
                    </div>
                    <div class="mb-3">
                        @Html.TextBoxFor(model => model.GalleryImages, null, new { type="file", @class="form-control", runat="server" , multiple="multiple" })
                        @Html.ValidationMessageFor(model => model.GalleryImages, null, new { @class="text-danger" })
                    </div>

                    <div class="mb-3">
                        <h2>Decleration</h2>
                    </div>
                    <div class="mb-3">
                        @Html.DropDownListFor(model => model.ProductIDTO.DeclarationId, Model.DeclarationODTOs.Select(dec =>
                    new SelectListItem() { Value = dec.DeclarationId.ToString(), Text = dec.DeclarationName }),
                    "Select Declaration", new { @class="form-control" })
                        @Html.ValidationMessageFor(model => model.ProductIDTO.DeclarationId, null, new { @class="text-danger" })
                    </div>
                </div>
            </div>

            <div class="col-5 mx-auto mb-3 w-50">
                <input type="submit" value="Save" class="form-control p-2 bg-success text-light" />
            </div>
        }
    </div>
</div>

@section Scripts{
    <script>
        $(document).ready(function () {
            console.log(@Json.Serialize(Model))
            if ($("#ProductIDTO_IsOnSale").attr('checked')) {
                $("input[name*='SaleIDTO'], select[name*='SaleIDTO']").removeAttr("disabled");
            }
            else {
                $("input[name*='SaleIDTO'], select[name*='SaleIDTO']").attr("disabled", true);
            }

            $.ajax({
                type: "GET",
                url: "/Dashboard/AllAttributesByCategory",
                data: { CategoryId: $("#ProductIDTO_CategoriesId").val() },
                success: function (data) {
                    let counter = 0;
                    $('#section2').append('<div class="mb-3 attr"><h2>Attributes</h2><div id="attributeArea" class="mb-3"></div></div>')
                    $.each(data.data.attrValues, function (index, attribute) {
                        if (attribute.length > 0) {
                            let attributesOptions = ""
                            $.each(attribute, function (i, attr) {
                                attributesOptions += "<option value='" + attr.attributesId + "'>" + attr.value + "</option>"
                            });
                            let htmlAttributes = "<label>" + data.data.attrs[counter++].categoryName + "</label><div class='mb-3'><select name='ProductAttributeValues[]' class='form-control multipleSelect' multiple>" + attributesOptions + "</select></div>";
                            $("#attributeArea").append(htmlAttributes);
                        }
                    });

                    let selectedAttributes = @Json.Serialize(Model.ProductAttributeValues);
                    $('.multipleSelect > option').each(function (index) {
                        if (selectedAttributes.includes(parseInt($(this).val()))) {
                            $(this).prop("selected", "selected");
                        }
                    });

                    generateMultiselect();
                },
                error: function () {
                    alert("Error on getting attributes!");
                }
            })
        });

        let generateMultiselect = function () {
            $('.multipleSelect').multiselect({
                nonSelectedText: '-Select value-',
                //allSelectedText: 'All values are selected',
                numberDisplayed: 100,
                nSelectedText: ' Values selected',
                includeSelectAllOption: true,

                enableFiltering: true,
                enableCaseInsensitiveFiltering: true,

                buttonClass: "btn bg-white",
                enableHTML: true
            });

            var elements = $("[data-toggle]");

            elements.each(function () {
                var oldValue = $(this).attr("data-toggle");

                $(this).removeAttr("data-toggle");
                $(this).attr("data-bs-toggle", oldValue);
            });
        }


        $("#ProductIDTO_IsOnSale").change(function () {
            if (this.checked) {
                $("input[name*='SaleIDTO'], select[name*='SaleIDTO']").removeAttr("disabled");
            }
            else {
                $("input[name*='SaleIDTO'], select[name*='SaleIDTO']").attr("disabled", true);
            }
        });

        $("#ProductIDTO_CategoriesId").change(function () {
            $('.attr').html("");
            $.ajax({
                type: "GET",
                url: "/Dashboard/AllAttributesByCategory",
                data: { CategoryId: $(this).val() },
                success: function (data) {
                    console.log(data)
                    let counter = 0;
                    if (data.data.attrs.length > 0) {
                        $('#section2').append('<div class="mb-3 attr"><h2>Attributes</h2><div id="attributeArea" class="mb-3"></div></div>')
                    }
                    $.each(data.data.attrValues, function (index, attribute) {
                        if (attribute.length > 0) {
                            let attributesOptions = ""
                            $.each(attribute, function (i, attr) {
                                attributesOptions += "<option value='" + attr.attributesId + "'>" + attr.value + "</option>"
                            });
                            let htmlAttributes = "<label>" + data.data.attrs[counter++].categoryName + "</label><div class='mb-3'><select name='ProductAttributeValues[]' class='form-control multipleSelect' multiple>" + attributesOptions + "</select></div>";
                            $("#attributeArea").append(htmlAttributes);
                        }
                    });
                    generateMultiselect();
                },
                error: function () {
                    alert("Error on getting attributes!");
                }
            })
        });
    </script>
}