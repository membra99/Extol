@model Universal.DTO.ViewDTO.DataIDTO

@{
    ViewData["Title"] = "Edit Data";
}

<div class="col-12 bg-light mx-auto rounded-3">
	@using (Html.BeginForm("EditDataAction", "Dashboard", FormMethod.Post, new { enctype = "multipart/form-data" }))
	{
		@Html.HiddenFor(model => model.ProductIDTO.ProductId)
		<div class="d-flex flex-row justify-content-around">
			<div class="col-8">
				<div class="mb-3">
					<h4>Product</h4>
				</div>
				<div class="row">
					<div class="form-group col-6 mb-3">
						<div class="mb-3">
							@Html.HiddenFor(model => model.ProductIDTO.LanguageID,new { @class = "lang" })
						</div>
						@Html.LabelRequiredFor(model => model.ProductIDTO.ProductCode, "Product code:", true)
						@Html.TextBoxFor(model => model.ProductIDTO.ProductCode, null, new { @class="form-control", placeholder = "Product Code" })
						@Html.ValidationMessageFor(model => model.ProductIDTO.ProductCode, null, new { @class="text-danger" })
					</div>
					<div class="form-group col-6 mb-3">
						@Html.LabelRequiredFor(model => model.ProductIDTO.ProductName, "Product name:", true)
						@Html.TextBoxFor(model => model.ProductIDTO.ProductName, null, new { @class="form-control", placeholder = "Product Name" })
						@Html.ValidationMessageFor(model => model.ProductIDTO.ProductName, null, new { @class="text-danger" })
					</div>
				</div>
				<div class="row">
					<div class="form-group col-6 mb-3">
						@Html.LabelFor(model => model.ProductIDTO.Quantity, "Product quantity:")
						@Html.TextBoxFor(model => model.ProductIDTO.Quantity, null, new { type="number", @class="form-control", placeholder="Quantity" })
						@Html.ValidationMessageFor(model => model.ProductIDTO.Quantity, null, new { @class="text-danger" })
					</div>
					<div class="form-group col-6 mb-3">
						@Html.LabelRequiredFor(model => model.ProductIDTO.Price, "Product price:", true)
						@Html.TextBoxFor(model => model.ProductIDTO.Price, null, new { type="number", @class="form-control", placeholder="Price" })
						@Html.ValidationMessageFor(model => model.ProductIDTO.Price, null, new { @class="text-danger" })
					</div>
				</div>
				<div class="row justify-content-center">
					<div class="form-check from-switch form-group col-3 mb-3">
						@Html.CheckBoxFor(model => model.ProductIDTO.IsOnSale, new { @class="form-check-input", role="switch" })
						@Html.LabelFor(model => model.ProductIDTO.IsOnSale, "On sale", new{ @class="form-check-label" })
						@Html.ValidationMessageFor(model => model.ProductIDTO.IsOnSale, null, new { @id="onSaleCheck", @class="text-danger" })
					</div>
					<div class="form-check from-switch form-group col-3 mb-3">
						@Html.CheckBoxFor(model => model.ProductIDTO.Recommended, new { @class="form-check-input", role="switch" })
						@Html.LabelFor(model => model.ProductIDTO.Recommended, "Recommended", new{ @class="form-check-label" })
						@Html.ValidationMessageFor(model => model.ProductIDTO.Recommended, null, new { @class="text-danger" })
					</div>
					<div class="form-check from-switch form-group col-3 mb-3">
						@Html.CheckBoxFor(model => model.ProductIDTO.BestProduct, new { @class="form-check-input", role="switch" })
						@Html.LabelFor(model => model.ProductIDTO.BestProduct, "Best product", new{ @class="form-check-label" })
						@Html.ValidationMessageFor(model => model.ProductIDTO.BestProduct, null, new { @class="text-danger" })
					</div>
				</div>
				<div class="form-group mb-3">
					@Html.LabelFor(model => model.ProductIDTO.Description, "Product description:")
					@Html.TextAreaFor(model => model.ProductIDTO.Description, 15, 1, new { @Id="tiny", @class="form-control", placeholder = "Description" })
					@Html.ValidationMessageFor(model => model.ProductIDTO.Description, null, new { @class="text-danger" })
				</div>
				<div class="form-group mb-3">
					@Html.LabelFor(model => model.ProductIDTO.Specification, "Product specification:")
					@Html.TextAreaFor(model => model.ProductIDTO.Specification, 15, 1, new { @Id="tiny", @class="form-control", placeholder = "Specification" })
					@Html.ValidationMessageFor(model => model.ProductIDTO.Specification, null, new { @class="text-danger" })
				</div>

			</div>
			<div id="section2" class="col-3">
				<div class="mb-3">
					<h4>Category</h4>
				</div>
				<div class="form-group mb-3">
					@Html.LabelRequiredFor(model => model.ProductIDTO.CategoriesId, "Product Category:", true)
					@Html.DropDownListFor(model => model.ProductIDTO.CategoriesId, Model.CategoriesODTOs.Select(cat =>
				new SelectListItem() { Value = cat.CategoryId.ToString(), Text = cat.CategoryName }),
				"Select Category",new { @class="form-control"})
					@Html.ValidationMessageFor(model => model.ProductIDTO.CategoriesId, null, new { @class="text-danger" })
				</div>
				<div id="attributeSection" class="form-group mb-3">
				</div>
				<hr>
				<div class="form-group col-6 mb-3">
					<h4>Sale</h4>
				</div>
				<div class="row">
					<div class="form-group col-6 mb-3">
						@Html.LabelFor(model => model.ProductIDTO.SaleIDTO.SaleTypeId, "Sale type:")
						@Html.DropDownListFor(model => model.ProductIDTO.SaleIDTO.SaleTypeId, Model.SaleTypeODTOs.Select(sale =>
					new SelectListItem() { Value = sale.SaleTypeId.ToString(), Text = sale.Value }),
					"Select Sale Type",new { @class="form-control", disabled="disabled" })
						@Html.ValidationMessageFor(model => model.ProductIDTO.SaleIDTO.SaleTypeId, null, new { @class="text-danger" })
					</div>
					<div class="form-group col-6 mb-3">
						@Html.LabelFor(model => model.ProductIDTO.SaleIDTO.Value, "Sale value:")
						@Html.TextBoxFor(model => model.ProductIDTO.SaleIDTO.Value, null, new { type = "number", @class = "form-control", placeholder = "Sale Value", disabled="disabled" })
						@Html.ValidationMessageFor(model => model.ProductIDTO.SaleIDTO.Value, null, new { @class="text-danger" })
					</div>
					<div class="form-group mb-3">
						@Html.Label("Sale start & end date:")
						@Html.TextBox("datefilter", null, null, new { @class="form-control", placeholder="Start & End Date", id="datefromto", disabled="disabled" })
						@Html.ValidationMessageFor(model => model.ProductIDTO.SaleIDTO.StartDate, null, new { @class="text-danger" })
						@Html.ValidationMessageFor(model => model.ProductIDTO.SaleIDTO.EndDate, null, new { @class="text-danger" })

						@Html.HiddenFor(model => model.ProductIDTO.SaleIDTO.StartDate)
						@Html.HiddenFor(model => model.ProductIDTO.SaleIDTO.EndDate)
					</div>
					@*<div class="form-group col-6 mb-3">
						@Html.LabelFor(model => model.ProductIDTO.SaleIDTO.StartDate, "Sale start date:")
						@Html.TextBoxFor(model => model.ProductIDTO.SaleIDTO.StartDate, null, new { type="date", @class="form-control", disabled="disabled" })
						@Html.ValidationMessageFor(model => model.ProductIDTO.SaleIDTO.StartDate, null, new { @class="text-danger" })
					</div>
					<div class="form-group col-6 mb-3">
						@Html.LabelFor(model => model.ProductIDTO.SaleIDTO.EndDate, "Sale end date:")
						@Html.TextBoxFor(model => model.ProductIDTO.SaleIDTO.EndDate, null, new { type="date", @class="form-control", disabled="disabled" })
						@Html.ValidationMessageFor(model => model.ProductIDTO.SaleIDTO.EndDate, null, new { @class="text-danger" })
				</div>*@
				</div>
				<hr>
				<div class="form-group mb-3">
					<h4>Declaration</h4>
				</div>
				<div class="form-group mb-3">
					@Html.LabelFor(model => model.ProductIDTO.DeclarationId, "Declaration:")
					@Html.DropDownListFor(model => model.ProductIDTO.DeclarationId, Model.DeclarationODTOs.Select(dec =>
				new SelectListItem() { Value = dec.DeclarationId.ToString(), Text = dec.DeclarationName }),
				"Select Declaration", new { @class="form-control" })
					@Html.ValidationMessageFor(model => model.ProductIDTO.DeclarationId, null, new { @class="text-danger" })
				</div>
				<hr>
				<div class="form-group mb-3">
					<h4>SEO</h4>
				</div>
				<div class="form-group mb-3">
					<div class="mb-3">
						@Html.HiddenFor(model => model.ProductIDTO.SeoIDTO.LanguageID,new { @class = "lang" })
					</div>
					@Html.LabelFor(model => model.ProductIDTO.SeoIDTO.GoogleDesc, "Meta description:")
					@Html.TextBoxFor(model => model.ProductIDTO.SeoIDTO.GoogleDesc, null, new { @class="form-control", placeholder = "Google Description" })
					@Html.ValidationMessageFor(model => model.ProductIDTO.SeoIDTO.GoogleDesc, null, new { @class="text-danger" })
				</div>
				<div class="form-group mb-3">
					@Html.LabelFor(model => model.ProductIDTO.SeoIDTO.GoogleKeywords, "Meta keywords:")
					@Html.TextBoxFor(model => model.ProductIDTO.SeoIDTO.GoogleKeywords, null, new { @class="form-control", placeholder = "Google Keywords" })
					@Html.ValidationMessageFor(model => model.ProductIDTO.SeoIDTO.GoogleKeywords, null, new { @class="text-danger" })
				</div>
				<hr>
				<div class="form-group mb-3">
					<h4>Feature Image</h4>
				</div>
				<div class="form-group mb-3">
					@Html.LabelRequiredFor(model => model.FeaturedImage, "Product image:", true)
					@Html.TextBoxFor(model => model.FeaturedImage, null, new { type="file", @class="form-control mb-3", id="file", runat="server", onchange="loadFile(event)"})
					@Html.ValidationMessageFor(model => model.FeaturedImage, null, new { @class="text-danger" })
						<div class="text-center image-container">
						<img src="@Url.Action("GetImage","Dashboard",new {path = Model.ProductIDTO.FeatureImg})" id="featured-preview" width="75" height="75" style="border: 2px solid indigo">
						<a class="unset-button" id="unset" onclick="unsetImage(event)" title="Unset Image">x</a>
					</div>
				</div>
				<hr>
				<div class="form-group mb-3">
					<h4>Gallery Images</h4>
				</div>
				<div class="form-group mb-3">
					@Html.LabelFor(model => model.GalleryImages, "Product gallery images:")
					@Html.TextBoxFor(model => model.GalleryImages, null, new { type="file", @class="form-control mb-3", runat="server" , multiple="multiple", onchange="loadMultipleFile(event)" })
					@Html.ValidationMessageFor(model => model.GalleryImages, null, new { @class="text-danger" })
					<div class="d-flex flex-row justify-content-between  text-center">
						<img src="@Url.Action("GetImage","Dashboard",new {path = (Model.ProductIDTO.GalleyImg.Count > 0) ? Model.ProductIDTO.GalleyImg[0] : null})" id="gallery-preview-0" width="75" height="75" style="border: 2px solid indigo">
						<img src="@Url.Action("GetImage","Dashboard",new {path = (Model.ProductIDTO.GalleyImg.Count > 1) ? Model.ProductIDTO.GalleyImg[1] : null})" id="gallery-preview-1" width="75" height="75" style="border: 2px solid indigo">
						<img src="@Url.Action("GetImage","Dashboard",new {path = (Model.ProductIDTO.GalleyImg.Count > 2) ? Model.ProductIDTO.GalleyImg[2] : null})" id="gallery-preview-2" width="75" height="75" style="border: 2px solid indigo">
						<img src="@Url.Action("GetImage","Dashboard",new {path = (Model.ProductIDTO.GalleyImg.Count > 3) ? Model.ProductIDTO.GalleyImg[3] : null})" id="gallery-preview-3" width="75" height="75" style="border: 2px solid indigo">
						<img src="@Url.Action("GetImage","Dashboard",new {path = (Model.ProductIDTO.GalleyImg.Count > 4) ? Model.ProductIDTO.GalleyImg[4] : null})" id="gallery-preview-4" width="75" height="75" style="border: 2px solid indigo">
					</div>
				</div>
				<hr>
			</div>
		</div>

		<div class="mx-auto mb-3 w-25">
			<input type="submit" value="Save" class="form-control p-2 btn-dotnet" />
		</div>
	}
</div>

@section Scripts{
    <script>
		let loadFile = function (event) {
			let image = document.getElementById('featured-preview');
			image.src = URL.createObjectURL(event.target.files[0]);
			let element = document.getElementById('unset');
			element.classList.add("hover-unset");

		};

		function unsetImage(event) {
			console.log("BLEJBLEJ ", event)
			let image = document.getElementById('featured-preview');
			image.src = '@Url.Action("GetImage","Dashboard",null)';
			$("#file").val(null);

			let element = document.getElementById('unset');
			element.classList.remove("hover-unset");
			event.preventDefault();
		}





		let loadMultipleFile = function (event) {
			for (let i = 0; i < event.target.files.length; i++) {
				let image = document.getElementById('gallery-preview-' + i);
				image.src = URL.createObjectURL(event.target.files[i]);
			}
		};
        $(document).ready(function () {

			let image = document.getElementById('featured-preview');
			var parts = image.src.split('/');
			var result = parts.slice(3).join('/');
			console.log("Aba",result);
			if (result != "Dashboard/GetImage") {
				let element = document.getElementById('unset');
				element.classList.add("hover-unset");
			}

		let saleIdto = @Json.Serialize(Model.ProductIDTO.SaleIDTO);
			var startDate = saleIdto.startDate.split('-').reverse().join('/');
			var endDate = saleIdto.endDate.split('-').reverse().join('/');
			$('input[name="datefilter"]').daterangepicker({
				endDate: Date.parse(saleIdto.endDate),
				startDate: Date.parse(saleIdto.startDate),
				autoUpdateInput: false,
				locale: {
					cancelLabel: 'Clear',
					format: 'DD/MM/YYYY',
				}
			}).val(startDate + " - " + endDate);

			$('input[name="datefilter"]').on('apply.daterangepicker', function (ev, picker) {
				$(this).val(picker.startDate.format('MM/DD/YYYY') + ' - ' + picker.endDate.format('MM/DD/YYYY'));
				$("[name^='ProductIDTO.SaleIDTO.StartDate']").val(picker.startDate.format('MM/DD/YYYY'));
				$("[name^='ProductIDTO.SaleIDTO.EndDate']").val(picker.endDate.format('MM/DD/YYYY'));
			});

			$('input[name="datefilter"]').on('cancel.daterangepicker', function (ev, picker) {
				$(this).val('');
			});

            console.log(@Json.Serialize(Model))
            if ($("#ProductIDTO_IsOnSale").attr('checked')) {
				$("input[name*='SaleIDTO'], select[name*='SaleIDTO'], [name^='datefilter'] ").removeAttr("disabled");
            }
            else {
				$("input[name*='SaleIDTO'], select[name*='SaleIDTO'], [name^='datefilter']").attr("disabled", true);
            }


            $.ajax({
                type: "GET",
                url: "/Dashboard/AllAttributesByCategory",
                data: { CategoryId: $("#ProductIDTO_CategoriesId").val() },
                success: function (data) {
                    let counter = 0;
					$('#attributeSection').append('<div class="mb-3 attr"><h2>Attributes</h2><div id="attributeArea" class="mb-3"></div></div>')
                    $.each(data.data.attrValues, function (index, attribute) {
                        if (attribute.length > 0) {
                            let attributesOptions = ""
                            $.each(attribute, function (i, attr) {
                                attributesOptions += "<option value='" + attr.attributesId + "'>" + attr.value + "</option>"
                            });
                            let htmlAttributes = "<label>" + data.data.attrs[counter++].categoryName + "</label><div class='mb-3'><select name='ProductAttributeValues[]' class='form-control multipleSelect' multiple>" + attributesOptions + "</select></div>";
                            $("#attributeArea").append(htmlAttributes);
                        }
                    });

                    let selectedAttributes = @Json.Serialize(Model.ProductAttributeValues);
                    $('.multipleSelect > option').each(function (index) {
                        if (selectedAttributes.includes(parseInt($(this).val()))) {
                            $(this).prop("selected", "selected");
                        }
                    });

                    generateMultiselect();
                },
                error: function () {
                    alert("Error on getting attributes!");
                }
            })
        });

        let generateMultiselect = function () {
            $('.multipleSelect').multiselect({
                nonSelectedText: '-Select value-',
                //allSelectedText: 'All values are selected',
                numberDisplayed: 100,
                nSelectedText: ' Values selected',
                includeSelectAllOption: true,

                enableFiltering: true,
                enableCaseInsensitiveFiltering: true,

                buttonClass: "btn bg-white",
                enableHTML: true
            });

            var elements = $("[data-toggle]");

            elements.each(function () {
                var oldValue = $(this).attr("data-toggle");

                $(this).removeAttr("data-toggle");
                $(this).attr("data-bs-toggle", oldValue);
            });
        }


        $("#ProductIDTO_IsOnSale").change(function () {
            if (this.checked) {
				$("input[name*='SaleIDTO'], select[name*='SaleIDTO'], [name^='datefilter']").removeAttr("disabled");
            }
            else {
				$("input[name*='SaleIDTO'], select[name*='SaleIDTO'], [name^='datefilter']").attr("disabled", true);
            }
        });

        $("#ProductIDTO_CategoriesId").change(function () {
            $('.attr').html("");
            $.ajax({
                type: "GET",
                url: "/Dashboard/AllAttributesByCategory",
                data: { CategoryId: $(this).val() },
                success: function (data) {
                    console.log(data)
                    let counter = 0;
                    if (data.data.attrs.length > 0) {
						$('#attributeSection').append('<div class="mb-3 attr"><h2>Attributes</h2><div id="attributeArea" class="mb-3"></div></div>')
                    }
                    $.each(data.data.attrValues, function (index, attribute) {
                        if (attribute.length > 0) {
                            let attributesOptions = ""
                            $.each(attribute, function (i, attr) {
                                attributesOptions += "<option value='" + attr.attributesId + "'>" + attr.value + "</option>"
                            });
                            let htmlAttributes = "<label>" + data.data.attrs[counter++].categoryName + "</label><div class='mb-3'><select name='ProductAttributeValues[]' class='form-control multipleSelect' multiple>" + attributesOptions + "</select></div>";
                            $("#attributeArea").append(htmlAttributes);
                        }
                    });
                    generateMultiselect();
                },
                error: function () {
                    alert("Error on getting attributes!");
                }
            })
        });


        $('.lang').val($('#language').val());

        $('#language').change(function() {
            $('.lang').val($(this).val());
        });
    </script>
}